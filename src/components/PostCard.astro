---
import { formatDate, getReadingTime } from '@/lib/schema';

interface Props {
  post: {
    slug: string;
    data: {
      title: string;
      summary: string;
      publishedAt: Date;
      tags?: string[];
      heroImage?: string;
    };
  };
  featured?: boolean;
}

const { post, featured = false } = Astro.props;
---

<article class={`card-hover ${featured ? 'md:col-span-2' : ''}`}>
  {post.data.heroImage && (
    <div class="aspect-video overflow-hidden rounded-t-2xl">
      <img
        src={post.data.heroImage}
        alt={post.data.title}
        class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
        loading="lazy"
      />
    </div>
  )}
  
  <div class="p-6">
    <div class="flex items-center gap-4 text-sm text-muted-500 mb-3">
      <time datetime={post.data.publishedAt.toISOString()}>
        {formatDate(post.data.publishedAt)}
      </time>
      <span>â€¢</span>
      <span>{getReadingTime(post.data.summary)} min read</span>
    </div>
    
    <h3 class={`font-display font-semibold mb-3 ${featured ? 'text-2xl' : 'text-xl'}`}>
      <a href={`/blog/${post.slug}`} class="hover:text-primary-600 transition-colors">
        {post.data.title}
      </a>
    </h3>
    
    <p class="text-muted-600 mb-4">
      {post.data.summary}
    </p>
    
    {post.data.tags && post.data.tags.length > 0 && (
      <div class="flex flex-wrap gap-2">
        {post.data.tags.slice(0, 3).map((tag) => (
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-50 text-primary-700">
            {tag}
          </span>
        ))}
      </div>
    )}
  </div>
</article>



