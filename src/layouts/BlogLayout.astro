---
import { generateSEO, generateBlogPostSchema } from '@/lib/seo';
import BaseLayout from './BaseLayout.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import AuthorBio from '@/components/AuthorBio.astro';

interface Props {
  seo: any;
  post?: any;
  relatedPosts?: any[];
  currentPage?: string;
}

const { seo, post = null, relatedPosts = [], currentPage } = Astro.props;

const blogSeo = generateSEO({
  ...seo,
  ogType: 'article',
  publishedTime: post?.data?.publishedAt?.toISOString() || new Date().toISOString(),
  modifiedTime: post?.data?.updatedAt?.toISOString(),
  author: 'Dr Adrian Laurence',
  tags: post?.data?.tags || [],
});

const blogSchema = post ? generateBlogPostSchema({
  title: post.data.title,
  description: post.data.summary,
  url: `/blog/${post.slug}`,
  publishedTime: post.data.publishedAt.toISOString(),
  modifiedTime: post.data.updatedAt?.toISOString(),
  author: 'Dr Adrian Laurence',
  tags: post.data.tags || [],
}) : null;
---

<BaseLayout seo={blogSeo} currentPage={currentPage || "blog"}>
  <Header currentPage={currentPage || "blog"} />
  
  {post ? (
    <article class="section-padding">
      <div class="container-custom max-w-4xl">
        <!-- Article Header -->
        <header class="mb-12">
          <div class="flex items-center gap-4 text-sm text-muted-500 mb-6">
            <time datetime={post.data.publishedAt.toISOString()}>
              {post.data.publishedAt.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </time>
            {post.data.updatedAt && (
              <>
                <span>•</span>
                <span>Updated {post.data.updatedAt.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}</span>
              </>
            )}
            <span>•</span>
            <span>{post.data.readingTime} min read</span>
          </div>
          
          <h1 class="font-display font-semibold text-3xl md:text-4xl lg:text-5xl mb-6">
            {post.data.title}
          </h1>
          
          {post.data.summary && (
            <p class="text-xl text-muted-600 leading-relaxed">
              {post.data.summary}
            </p>
          )}
          
          {post.data.tags && post.data.tags.length > 0 && (
            <div class="flex flex-wrap gap-2 mt-6">
              {post.data.tags.map((tag: string) => (
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary-50 text-primary-700">
                  {tag}
                </span>
              ))}
            </div>
          )}
        </header>
        
        <!-- Hero Image -->
        {post.data.heroImage && (
          <div class="aspect-video overflow-hidden rounded-2xl mb-12">
            <img
              src={post.data.heroImage}
              alt={post.data.title}
              class="w-full h-full object-cover"
            />
          </div>
        )}
        
        <!-- Article Content -->
        <div class="prose prose-lg max-w-none">
          <slot />
        </div>
        
        <!-- CTA -->
        {post.data.cta && (
          <div class="mt-12 p-6 bg-primary-50 rounded-2xl">
            <p class="text-lg font-medium mb-4">{post.data.cta}</p>
            <a href="https://dradrianlaurence.substack.com" class="btn-primary" target="_blank" rel="noopener noreferrer">
              Read the newsletter
            </a>
          </div>
        )}
      </div>
    </article>
  ) : (
    <div class="section-padding">
      <div class="container-custom max-w-4xl">
        <slot />
      </div>
    </div>
  )}

  <!-- Related Posts -->
  {relatedPosts && relatedPosts.length > 0 && (
    <section class="py-16 bg-muted-50">
      <div class="container-custom max-w-6xl">
        <h2 class="font-display font-semibold text-2xl md:text-3xl mb-8">Related Articles</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {relatedPosts.map((relatedPost) => (
            <article class="card p-6 hover:shadow-lg transition-shadow">
              <div class="flex items-center gap-3 text-sm text-muted-500 mb-3">
                <time datetime={relatedPost.data.publishedAt.toISOString()}>
                  {relatedPost.data.publishedAt.toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </time>
                <span>•</span>
                <span>{relatedPost.data.readingTime} min read</span>
              </div>
              <h3 class="font-display font-semibold text-xl mb-3">
                <a href={`/blog/${relatedPost.slug}`} class="hover:text-primary-600 transition-colors">
                  {relatedPost.data.title}
                </a>
              </h3>
              <p class="text-muted-600 mb-4">
                {relatedPost.data.summary}
              </p>
              <a href={`/blog/${relatedPost.slug}`} class="text-primary-600 font-medium hover:text-primary-700 transition-colors">
                Read more →
              </a>
            </article>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Author Bio -->
  <AuthorBio />

  <Footer />

  {blogSchema && (
    <script type="application/ld+json" set:html={JSON.stringify(blogSchema)} />
  )}
</BaseLayout>